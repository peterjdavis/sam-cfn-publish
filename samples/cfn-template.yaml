AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AssetBucket:
    Type: String
    Default: ''

  APIStageName:
    Type: String
    Default: Test

Resources:
  VPCEndPointTestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: VPCEndPointTestFunctionRolePolicy0
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateAPI}/${APIStageName}/GET/'

  NoVPCEndPointTestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: NoVPCEndPointTestFunction
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/lambda/${NoVPCEndPointTestFunction}'
      RetentionInDays: 1

  NoVPCEndPointTestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NoVPCEndPointTestFunctionRolePolicy0
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateAPI}/${APIStageName}/GET/'

  PrivateAPILogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PrivateAPI
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${PrivateAPI}'
      RetentionInDays: 1

  PrivateAPIDeployment40ee4e38d3:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: 'RestApi deployment id: 40ee4e38d3d4795180b21c687d2a103231bc6bc8'
      RestApiId: !Ref 'PrivateAPI'
      StageName: Stage

  PrivateAPIFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PrivateAPIFunction
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PrivateAPIFunction}'
      RetentionInDays: 1

  NoVPCEndPointTestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import requests
          from aws_requests_auth.boto_utils import BotoAWSRequestsAuth
          APIG_ID = os.environ['APIG_ID']
          AWS_REGION = os.environ['AWS_REGION']
          API_STAGE_NAME = os.environ['API_STAGE_NAME']
          def lambda_handler(event, context):
              print('REQUEST RECEIVED:\n' + json.dumps(event))
              url = 'https://{apig_id}.execute-api.{aws_region}.amazonaws.com/{api_stage_name}'.format(
                  apig_id=APIG_ID, 
                  aws_region=AWS_REGION, 
                  api_stage_name=API_STAGE_NAME
              )
              params = event
              headers = {'x-apigw-api-id' : APIG_ID}
              auth = BotoAWSRequestsAuth(
                  aws_host='{apig_id}.execute-api.{aws_region}.amazonaws.com'.format(
                      apig_id=APIG_ID, 
                      aws_region=AWS_REGION
                  ),
                  aws_region=AWS_REGION,
                  aws_service="execute-api"
              )
              response = requests.get(url, params=params, headers=headers, auth=auth)
              return {"statusCode": response.status_code,
                      "body": json.dumps(response.json())}
      Handler: index.lambda_handler
      Role: !GetAtt 'NoVPCEndPointTestFunctionRole.Arn'
      Runtime: python3.9
      Environment:
        Variables:
          APIG_ID: !Ref 'PrivateAPI'
          API_STAGE_NAME: !Ref 'APIStageName'
      Layers:
        - !Ref 'ApiCallLayer037f16da03'

  PrivateAPIFunctionApiEventsPermissionStage:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'PrivateAPIFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/
        - __ApiId__: !Ref 'PrivateAPI'
          __Stage__: '*'

  PrivateAPIFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ApiCallLayer037f16da03:
    Type: AWS::Lambda::LayerVersion
    DeletionPolicy: Retain
    Properties:
      Content:
        S3Bucket: !Ref 'AssetBucket'
        S3Key: !Sub 'Layer/b62c1418a3a722bad67fa03cbc31bf66'
      LayerName: ApiCallLayer
      CompatibleRuntimes:
        - python3.9

  PrivateAPIEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'EndPointSecurityGroup'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      SubnetIds:
        - !Sub '${LambdaVpc.Outputs.PrivateSubnet1AID}'
        - !Sub '${LambdaVpc.Outputs.PrivateSubnet2AID}'
      VpcEndpointType: Interface
      VpcId: !Sub '${LambdaVpc.Outputs.VPCID}'

  PrivateAPIStageExecutionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub 'API-Gateway-Execution-Logs_${PrivateAPI}/${APIStageName}'
      RetentionInDays: 1

  VPCEndPointTestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import requests
          from aws_requests_auth.boto_utils import BotoAWSRequestsAuth
          APIG_ID = os.environ['APIG_ID']
          AWS_REGION = os.environ['AWS_REGION']
          API_STAGE_NAME = os.environ['API_STAGE_NAME']
          def lambda_handler(event, context):
              print('REQUEST RECEIVED:\n' + json.dumps(event))
              url = 'https://{apig_id}.execute-api.{aws_region}.amazonaws.com/{api_stage_name}'.format(
                  apig_id=APIG_ID, 
                  aws_region=AWS_REGION, 
                  api_stage_name=API_STAGE_NAME
              )
              params = event
              headers = {'x-apigw-api-id' : APIG_ID}
              auth = BotoAWSRequestsAuth(
                  aws_host='{apig_id}.execute-api.{aws_region}.amazonaws.com'.format(
                      apig_id=APIG_ID, 
                      aws_region=AWS_REGION
                  ),
                  aws_region=AWS_REGION,
                  aws_service="execute-api"
              )
              response = requests.get(url, params=params, headers=headers, auth=auth)
              return {"statusCode": response.status_code,
                      "body": json.dumps(response.json())}
      Handler: index.lambda_handler
      Role: !GetAtt 'VPCEndPointTestFunctionRole.Arn'
      Runtime: python3.9
      VpcConfig:
        SecurityGroupIds:
          - !Sub '${LambdaSecurityGroup.GroupId}'
        SubnetIds:
          - !Sub '${LambdaVpc.Outputs.PrivateSubnet1AID}'
          - !Sub '${LambdaVpc.Outputs.PrivateSubnet2AID}'
      Environment:
        Variables:
          APIG_ID: !Ref 'PrivateAPI'
          API_STAGE_NAME: !Ref 'APIStageName'
      Layers:
        - !Ref 'ApiCallLayer037f16da03'

  EndPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for APIG Interface Endpoint
      VpcId: !Sub '${LambdaVpc.Outputs.VPCID}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref 'LambdaSecurityGroup'

  PrivateAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PrivateAPIFunction.Arn}/invocations'
              responses: {}
        swagger: '2.0'
        x-amazon-apigateway-policy:
          Version: '2012-10-17'
          Statement:
            - Action: execute-api:Invoke
              Resource:
                - !Sub
                  - execute-api:/${__Stage__}/GET/
                  - __Stage__: !Ref 'APIStageName'
              Effect: Allow
              Principal: '*'
            - Action: execute-api:Invoke
              Resource:
                - !Sub
                  - execute-api:/${__Stage__}/GET/
                  - __Stage__: !Ref 'APIStageName'
              Effect: Deny
              Condition:
                StringNotEquals:
                  aws:SourceVpce:
                    - !Ref 'PrivateAPIEndPoint'
              Principal: '*'
      Name: !Sub '${AWS::StackName}-PrivateAPI'
      Parameters:
        endpointConfigurationTypes: PRIVATE
      EndpointConfiguration:
        Types:
          - PRIVATE
        VpcEndpointIds:
          - !Ref 'PrivateAPIEndPoint'

  VPCEndPointTestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: VPCEndPointTestFunction
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/lambda/${VPCEndPointTestFunction}'
      RetentionInDays: 1

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound access to the APIG
      VpcId: !Sub '${LambdaVpc.Outputs.VPCID}'

  PrivateAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      AccessLogSetting:
        DestinationArn: !Sub '${PrivateAPILogGroup.Arn}'
        Format: '{ ''requestId'':''$context.requestId'', ''ip'': ''$context.identity.sourceIp'', ''caller'':''$context.identity.caller'', ''user'':''$context.identity.user'',''requestTime'':''$context.requestTime'',
          ''xrayTraceId'':''$context.xrayTraceId'', ''wafResponseCode'':''$context.wafResponseCode'', ''httpMethod'':''$context.httpMethod'',''resourcePath'':''$context.resourcePath'', ''status'':''$context.status'',''protocol'':''$context.protocol'',
          ''responseLength'':''$context.responseLength'' }'
      DeploymentId: !Ref 'PrivateAPIDeployment40ee4e38d3'
      RestApiId: !Ref 'PrivateAPI'
      StageName: !Ref 'APIStageName'
      TracingEnabled: true
      MethodSettings:
        - HttpMethod: '*'
          MetricsEnabled: true
          ResourcePath: /*
          DataTraceEnabled: true
          LoggingLevel: INFO

  PrivateAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print('REQUEST RECEIVED:\n' + json.dumps(event))
              return {"statusCode": 200,
                      "body": json.dumps('Hello from Lambda - ' + json.dumps(event['queryStringParameters']))}
      Handler: index.lambda_handler
      Role: !GetAtt 'PrivateAPIFunctionRole.Arn'
      Runtime: python3.9

  LambdaVpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://aws-quickstart.s3.amazonaws.com/quickstart-aws-vpc/templates/aws-vpc.template.yaml
      TimeoutInMinutes: 60
      Parameters:
        AvailabilityZones: !Sub '${AWS::Region}a,${AWS::Region}b'
        NumberOfAZs: 2
        CreateNATGateways: false
        VPCCIDR: 192.168.0.0/16
        CreatePublicSubnets: false
        PrivateSubnet1ACIDR: 192.168.50.0/24
        PrivateSubnet2ACIDR: 192.168.51.0/24

Outputs:
  PrivateApiId:
    Description: ID of the API Gateway which needs to be passed in the x-apigw-api-id HTTP Header
    Value: !Ref 'PrivateAPI'
