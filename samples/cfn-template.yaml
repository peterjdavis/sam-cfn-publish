AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  AssetBucket:
    Type: String

  APIStageName:
    Type: String
    Default: Test

Resources:
  SampleApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-SampleAPI'
      StageName: !Ref 'APIStageName'
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: NONE
      MethodSettings:
        - HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
          MetricsEnabled: true
          DataTraceEnabled: true
      AccessLogSetting:
        DestinationArn: !Sub '${SampleApiLogGroup.Arn}'
        Format: '{ ''requestId'':''$context.requestId'', ''ip'': ''$context.identity.sourceIp'', ''caller'':''$context.identity.caller'', ''user'':''$context.identity.user'',''requestTime'':''$context.requestTime'',
          ''xrayTraceId'':''$context.xrayTraceId'', ''wafResponseCode'':''$context.wafResponseCode'', ''httpMethod'':''$context.httpMethod'',''resourcePath'':''$context.resourcePath'', ''status'':''$context.status'',''protocol'':''$context.protocol'',
          ''responseLength'':''$context.responseLength'' }'

  SampleApiLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: SampleApi
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${SampleApi}'
      RetentionInDays: 1

  SampleAthenaSpillBucket:
    Type: AWS::S3::Bucket

  SampleConnector:
    Type: AWS::Serverless::Connector
    Properties:
      Source:
        Id: SampleInlineFunction
      Destination:
        Id: SampleTable
      Permissions:
        - Read

  SampleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.10
      Architectures:
        - arm64
      Layers:
        - !Ref 'SampleLayer'
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref 'SampleApi'
      Tags:
        LeaveTag: This should stay
      CodeUri:
        Bucket: !Ref 'AssetBucket'
        Key: !Sub 'b2de06efb355ff47d2a3bf88480b2d03'
    Connectors:
      MyDDBConnector:
        Properties:
          Destination:
            Id: SampleTable
          Permissions:
            - Read
            - Write

  SampleInlineFunction:
    Type: AWS::Serverless::Function
    Metadata:
      LeaveMetadata: This should stay
      LeaveMetadata2: This should stay
    Properties:
      InlineCode: |
        import json

        def lambda_handler(event, context):
            print('REQUEST RECEIVED:\n' + json.dumps(event))

            return {"statusCode": 200,
                    "body": "SAM Rocks!"}


      Handler: index.lambda_handler
      Runtime: python3.10
      Architectures:
        - arm64
      Layers:
        - !Ref 'SampleLayer'

  SampleLayer:
    Type: AWS::Serverless::LayerVersion
    DeletionPolicy: Delete
    Properties:
      LayerName: SampleLayer
      ContentUri: s3://sam-773427694428-eu-west-1/81a135cc28f797dfb00c07dc70670789
      CompatibleRuntimes:
        - python3.10
    Metadata:
      BuildMethod: python3.10

  SampleTable:
    Type: AWS::Serverless::SimpleTable
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub '${AWS::StackName}-SampleTable'
